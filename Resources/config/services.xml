<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="lexik_jwt_authentication.jwt_encoder.class">Lexik\Bundle\JWTAuthenticationBundle\Encoder\JWTEncoder</parameter>
        <parameter key="lexik_jwt_authentication.handler.authentication_success.class">Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler</parameter>
        <parameter key="lexik_jwt_authentication.handler.authentication_failure.class">Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler</parameter>
        <parameter key="lexik_jwt_authentication.security.authentication.provider.class">Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider</parameter>
        <parameter key="lexik_jwt_authentication.security.authentication.listener.class">Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener</parameter>
        <parameter key="lexik_jwt_authentication.extractor.authorization_header_extractor.class">Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor</parameter>
        <parameter key="lexik_jwt_authentication.extractor.query_parameter_extractor.class">Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor</parameter>
    </parameters>

    <services>
        <!-- JWT Encoder / Decoder -->
        <service id="lexik_jwt_authentication.jwt_encoder" class="%lexik_jwt_authentication.jwt_encoder.class%">
            <argument>%lexik_jwt_authentication.private_key_path%</argument>
            <argument>%lexik_jwt_authentication.public_key_path%</argument>
            <argument>%lexik_jwt_authentication.pass_phrase%</argument>
        </service>
        <!-- JWT Authentication response interceptor  -->
        <service id="lexik_jwt_authentication.handler.authentication_success" class="%lexik_jwt_authentication.handler.authentication_success.class%">
            <argument type="service" id="lexik_jwt_authentication.jwt_encoder"/>
            <argument type="service" id="event_dispatcher"/>
            <argument>%lexik_jwt_authentication.token_ttl%</argument>
            <tag name="monolog.logger" channel="security"></tag>
        </service>
        <service id="lexik_jwt_authentication.handler.authentication_failure" class="%lexik_jwt_authentication.handler.authentication_failure.class%">
            <tag name="monolog.logger" channel="security"></tag>
        </service>
        <!-- JWT Security Authentication Provider -->
        <service id="lexik_jwt_authentication.security.authentication.provider" class="%lexik_jwt_authentication.security.authentication.provider.class%" public="false">
            <argument /> <!-- User Provider -->
            <argument type="service" id="lexik_jwt_authentication.jwt_encoder" />
        </service>
        <!-- JWT Security Authentication Listener -->
        <service id="lexik_jwt_authentication.security.authentication.listener" class="%lexik_jwt_authentication.security.authentication.listener.class%" public="false">
            <argument type="service" id="security.context"/>
            <argument type="service" id="security.authentication.manager" />
        </service>
        <!-- Authorization Header Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.authorization_header_extractor" class="%lexik_jwt_authentication.extractor.authorization_header_extractor.class%" public="false">
            <argument /> <!-- Header Value Prefix -->
        </service>
        <!-- Query Parameter Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.query_parameter_extractor" class="%lexik_jwt_authentication.extractor.query_parameter_extractor.class%" public="false">
            <argument /> <!-- Parameter Name -->
        </service>
    </services>

</container>
